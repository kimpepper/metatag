<?php
/**
 * @file
 * Install, update, and uninstall functions for the metatag module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_requirements().
 */
function metatag_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.

  if ($phase == 'install') {
    // Handle scenarios where the site had the legacy "metatags" module
    // installed but then had Metatag installed on top of it.
    if (function_exists('db_table_exists') && function_exists('db_field_exists') && function_exists('db_query') && Database::isActiveConnection()) {
      // Check if the primary table already exists.
      if (db_table_exists('metatag')) {
        // Check to see if all of the fields exist in the table. If one of the
        // fields does not exist, proceed with the fix.
        $fields = array(
          'entity_type',
          'entity_id',
          'revision_id',
          'language',
          'data',
        );
        foreach ($fields as $field) {
          // This field doesn't exist, so determine what to do.
          if (!db_field_exists('metatag', $field)) {
            // The table contains data, so rename it.
            if (db_query("SELECT COUNT(*) FROM {metatag}")->fetchField() > 0) {
              db_query("RENAME TABLE {metatag} TO {metatag}_legacy");
              $message = 'An out-of-date version of the {metatag} table was discovered. As the table contained data it was renamed with a suffix of "_legacy". This will not prevent installation from continuing, but will need to be dealt with later. See <a href="https://www.drupal.org/node/1391554">https://www.drupal.org/node/1391554</a> for further details.';
            }
            // The table is empty, so delete it.
            else {
              db_query("DROP TABLE {metatag}");
              $message = 'An out-of-date version of the {metatag} table was discovered. As the table was empty it was simply removed so that it could be recreated in the correct format. Installation may now proceed. See <a href="https://www.drupal.org/node/1391554">https://www.drupal.org/node/1391554</a> for further details.';
            }
            $requirements['metatag'] = array(
              'severity' => REQUIREMENT_WARNING,
              'title' => 'Metatag',
              'value' => t('Legacy data discovered.'),
              'description' => t($message),
            );
            drupal_set_message(t($message), 'warning');
            break;
          }
        }
      }
    }
  }
  elseif ($phase == 'runtime') {
    // Work out the release of D7 that is currently running.
    list($major, $minor) = explode('.', Drupal::VERSION);
    // Strip off any suffixes on the version string, e.g. "17-dev".
    if (strpos('-', $minor)) {
      list($minor, $suffix) = explode('-', $minor);
    }

    // Releases of Drupal older than 7.28 did not have entity_language(), which
    // is now required, and had a broken [node:summary] token.
    if ($minor < 28) {
      $requirements['metatag'] = array(
        'severity' => REQUIREMENT_WARNING,
        'title' => 'Metatag',
        'value' => t('Upgrade Drupal core to v7.28 or newer'),
        'description' => t("This older version of Drupal core is missing functionality necessary for the module's multilingual support and contains a broken [node:summary] token, it must be upgraded to version 7.28 or newer."),
      );
    }
    // Everything's OK.
    else {
      $requirements['metatag'] = array(
        'severity' => REQUIREMENT_OK,
        'title' => 'Metatag',
        'value' => t('Drupal core is compatible'),
        'description' => t('Older versions of Drupal core contained bugs that made them incompatible with Metatag, but this version will work correctly.'),
      );
    }

    // Add a note if Page Title is also installed.
    if (\Drupal::moduleHandler()->moduleExists('page_title')) {
      $requirements['metatag_page_title'] = array(
        'severity' => REQUIREMENT_INFO,
        'title' => 'Metatag',
        'value' => t('Possible conflicts with Page Title module'),
        'description' => t('The Metatag module is able to customize page titles so running the Page Title module simultaneously can lead to complications.'),
      );
    }

    // Add a note if the deprecated metatag.entity_translation.inc file still
    // exists.
    $filename = 'metatag.entity_translation.inc';
    if (file_exists(dirname(__FILE__) . '/' . $filename)) {
      $requirements['metatag_deprecated_et_file'] = array(
        'severity' => REQUIREMENT_ERROR,
        'title' => 'Metatag',
        'value' => t('Unwanted :filename file found', array(':filename' => $filename)),
        'description' => t("The :filename file was removed in v7.x-1.0-beta5 but it still exists in the site's Metatag module's directory and will cause problems. This file needs to be removed. The file's path in the Drupal directory structure is:<br /><code>!short_path</code><br />The file's full path is:<br /><code>!full_path</code>", array(':filename' => $filename, '!short_path' => drupal_get_path('module', 'metatag') . '/' . $filename, '!full_path' => dirname(__FILE__) . $filename)),
      );
    }

    // Check that Entity_Translation is current.
    if (\Drupal::moduleHandler()->moduleExists('entity_translation')) {
      $rev = db_query("SELECT schema_version FROM {system} WHERE name = :module", array(':module' => 'entity_translation'))->fetchColumn();
      if ($rev < 7004) {
        $requirements['metatag_et_old'] = array(
          'severity' => REQUIREMENT_ERROR,
          'title' => 'Metatag',
          'value' => t('<a href="@url">Entity_Translation</a> is out of date and requires updating', array('@url' => 'http://drupal.org/project/entity_translation')),
          'description' => t('The Entity_Translation module is out of date and needs to be updated in order to be compatible with Metatag.'),
        );
      }
    }

    // It's recommended to install the Transliteration module to clean up file
    // paths for use with image meta tags.
    if (!\Drupal::moduleHandler()->moduleExists('transliteration')) {
      $requirements['metatag_transliteration'] = array(
        'severity' => REQUIREMENT_INFO,
        'title' => 'Metatag',
        'value' => t('The Transliteration module is recommended.'),
        'description' => t("It is recommended to install the <a href=\"@url\">Transliteration module</a> to clean up filenames of uploaded files that may be used with image meta tags.", array('@url' => 'https://drupal.org/project/transliteration')),
      );
    }

    // It's recommended to install the Imagecache Token module to make image
    // tokens easier to do.
    if (!\Drupal::moduleHandler()->moduleExists('imagecache_token')) {
      $requirements['metatag_imagecache_token'] = array(
        'severity' => REQUIREMENT_INFO,
        'title' => 'Metatag',
        'value' => t('The Imagecache Token module is recommended.'),
        'description' => t("It is recommended to install the <a href=\"@url\">Imagecache Token module</a> to make it easier to control image meta tags, e.g. og:image.", array('@url' => 'https://drupal.org/project/imagecache_token')),
      );
    }

    // The Admin Language module can cause problems.
    if (!\Drupal::moduleHandler()->moduleExists('admin_language') && \Drupal::config('metatag.settings')->get('admin_language_force_neutral')) {
      // $requirements['metatag_admin_language'] = array(
//         'severity' => REQUIREMENT_WARNING,
//         'title' => 'Metatag',
//         'value' => t('Conflict with Admin Language module.'),
//         'description' => t("Using the \"@option\" with Metatag can lead to data loss, so it is recommended to <a href=\"@url\">disable that option</a>.", array('@option' => t('Force language neutral aliases'), '@url' => url('admin/config/regional/language/admin_language'))),
//       );

    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function metatag_schema() {
  $schema['metatag_config'] = array(
    'description' => 'Storage of meta tag configuration and defaults.',
    'export' => array(
      'key' => 'instance',
      'key name' => 'Instance',
      'primary key' => 'cid',
      'identifier' => 'config',
      'default hook' => 'metatag_config_default',
      'api' => array(
        'owner' => 'metatag',
        'api' => 'metatag',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      'cache defaults' => TRUE,
      'default cache bin' => 'cache_metatag',
    ),
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier for a metatag configuration set.',
        'no export' => TRUE,
      ),
      'instance' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine-name of the configuration, typically entity-type:bundle.',
      ),
      'config' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized data containing the meta tag configuration.',
        'translatable' => TRUE,
      ),
    ),
    'primary key' => array('cid'),
    'unique keys' => array(
      'instance' => array('instance'),
    ),
  );

  $schema['metatag'] = array(
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The entity id this data is attached to.',
      ),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The revision_id for the entity object this data is attached to.',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language of the tag.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'type_revision' => array('entity_type','revision_id'),
    ),
    'primary key' => array('entity_type', 'entity_id', 'revision_id', 'language'),
  );

  $schema['cache_metatag'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_metatag']['description'] = t('Cache table for the generated meta tag output.');

  return $schema;
}
